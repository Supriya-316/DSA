#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;

class node {
public:
    char keyword[20];
    char meaning[20];
    node *left;
    node *right;
    int ht;

    node() {
        strcpy(meaning, "");
        strcpy(keyword, "");
        left = right = NULL;
        ht = 0;
    }
};

class tree {
private:
    node *root;

public:
    tree() {
        root = NULL;
    }

    void insert1(char key[20], char mean[20]) {
        root = insert(root, key, mean);
    }

    node* insert(node *T, char word[20], char mean[20]);
    void preorder(node *);
    void inorder(node *);
    void postorder(node *);
    void display();
    void modify(node *);
    void delet();
    node* In_Succ(node *);
    void ascending() { inorder(root); }
    void descending(node *);
    void search1(node *);
    void search() { search1(root); }
    void max_compare(node *);
    node* Rotate_Left(node *T);
    node* Rotate_Right(node *T);
    int BF(node *T);
    int height(node *T);
};

int tree::BF(node *T) {
    int lh = 0, rh = 0;
    if (T == NULL) return 0;
    if (T->left != NULL) lh = 1 + T->left->ht;
    if (T->right != NULL) rh = 1 + T->right->ht;
    return (lh - rh);
}

node* tree::Rotate_Right(node *x) {
    node *y = x->left;
    x->left = y->right;
    y->right = x;
    x->ht = height(x);
    y->ht = height(y);
    return y;
}

node* tree::Rotate_Left(node *T) {
    node *temp = T->right;
    T->right = temp->left;
    temp->left = T;
    T->ht = height(T);
    temp->ht = height(temp);
    return temp;
}

int tree::height(node *T) {
    int lh = 0, rh = 0;
    if (T == NULL) return 0;
    if (T->left != NULL) lh = 1 + T->left->ht;
    if (T->right != NULL) rh = 1 + T->right->ht;
    return max(lh, rh);
}

node* tree::insert(node *T, char word[20], char mean[20]) {
    if (T == NULL) {
        T = new node();
        strcpy(T->keyword, word);
        strcpy(T->meaning, mean);
        T->left = T->right = NULL;
        T->ht = 0;
        return T;
    }
    if (strcmp(word, T->keyword) > 0) {
        T->right = insert(T->right, word, mean);
        if (BF(T) == -2) {
            if (strcmp(word, T->right->keyword) > 0)
                T = Rotate_Left(T);
            else {
                T->right = Rotate_Right(T->right);
                T = Rotate_Left(T);
            }
        }
    } else if (strcmp(word, T->keyword) < 0) {
        T->left = insert(T->left, word, mean);
        if (BF(T) == 2) {
            if (strcmp(word, T->left->keyword) < 0)
                T = Rotate_Right(T);
            else {
                T->left = Rotate_Left(T->left);
                T = Rotate_Right(T);
            }
        }
    }
    T->ht = height(T);
    return T;
}

void tree::modify(node *head) {
    char data[20], mean[20];
    bool flag = false;
    node *temp = head;
    cout << "\n Enter the word to modify: ";
    cin >> data;
    cout << "\n Enter new meaning: ";
    cin >> mean;
    while (temp != NULL) {
        if (strcmp(temp->keyword, data) == 0) {
            strcpy(temp->meaning, mean);
            flag = true;
            break;
        }
        if (strcmp(temp->keyword, data) < 0)
            temp = temp->right;
        else
            temp = temp->left;
    }
    if (flag)
        cout << "\n Updated meaning: " << temp->keyword << " : " << temp->meaning << endl;
    else
        cout << "\n Word not found in dictionary.\n";
}

void tree::delet() {
    cout << "\n Deletion is not fully implemented with AVL balancing in this version.\n";
}

node* tree::In_Succ(node *root) {
    node *trav = root->right;
    while (trav != NULL && trav->left != NULL) {
        trav = trav->left;
    }
    return trav;
}

void tree::preorder(node *root) {
    if (root != NULL) {
        cout << endl << root->keyword << " : " << root->meaning;
        preorder(root->left);
        preorder(root->right);
    }
}

void tree::inorder(node *root) {
    if (root != NULL) {
        inorder(root->left);
        cout << endl << root->keyword << " : " << root->meaning;
        inorder(root->right);
    }
}

void tree::postorder(node *root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        cout << endl << root->keyword << " : " << root->meaning;
    }
}

void tree::descending(node *root) {
    if (root != NULL) {
        descending(root->right);
        cout << endl << root->keyword << " : " << root->meaning;
        descending(root->left);
    }
}

void tree::search1(node *head) {
    char data[20];
    bool flag = false;
    node *temp = head;
    cout << "\n Enter word to search: ";
    cin >> data;
    while (temp != NULL) {
        if (strcmp(temp->keyword, data) == 0) {
            flag = true;
            break;
        }
        if (strcmp(temp->keyword, data) < 0)
            temp = temp->right;
        else
            temp = temp->left;
    }
    if (flag)
        cout << "\n Word found: " << data << endl;
    else
        cout << "\n Word not found." << endl;
}

void tree::max_compare(node *head) {
    char data[20];
    int count = 0;
    bool flag = false;
    node *temp = head;
    cout << "\n Enter word to search comparisons: ";
    cin >> data;
    while (temp != NULL) {
        count++;
        if (strcmp(temp->keyword, data) == 0) {
            flag = true;
            break;
        }
        if (strcmp(temp->keyword, data) < 0)
            temp = temp->right;
        else
            temp = temp->left;
    }
    if (flag)
        cout << "\n Comparisons made: " << count << endl;
    else
        cout << "\n Word not found." << endl;
}

void tree::display() {
    int ch;
    do {
        cout << "\nMenu:\n1. Preorder\n2. Inorder\n3. Postorder\n4. Modify\n5. Search\n6. Delete\n7. Ascending\n8. Descending\n9. Max Comparisons\n0. Exit\nEnter choice: ";
        cin >> ch;
        switch (ch) {
            case 1: preorder(root); break;
            case 2: inorder(root); break;
            case 3: postorder(root); break;
            case 4: modify(root); break;
            case 5: search(); break;
            case 6: delet(); break;
            case 7: ascending(); break;
            case 8: descending(root); break;
            case 9: max_compare(root); break;
            case 0: break;
            default: cout << "\nInvalid choice!";
        }
    } while (ch != 0);
}

int main() {
    tree b;
    char key[20], mean[20];
    int ans;
    do {
        cout << "\nEnter keyword and meaning: ";
        cin >> key >> mean;
        b.insert1(key, mean);
        cout << "Want to continue? (1/0): ";
        cin >> ans;
    } while (ans == 1);
    b.display();
    return 0;
}
