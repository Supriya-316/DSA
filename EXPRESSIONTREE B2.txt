#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

struct Node {
    char data;
    Node *left, *right;
    Node(char val) : data(val), left(nullptr), right(nullptr) {}
};

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

int precedence(char c) {
    if (c == '*' || c == '/') return 2;
    if (c == '+' || c == '-') return 1;
    return 0;
}

// Convert infix to postfix
string infixToPostfix(const string& infix) {
    stack<char> s;
    string postfix;

    for (char ch : infix) {
        if (isalnum(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            s.push(ch);
        } else if (ch == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top(); s.pop();
            }
            s.pop();
        } else if (isOperator(ch)) {
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) {
                postfix += s.top(); s.pop();
            }
            s.push(ch);
        }
    }

    while (!s.empty()) {
        postfix += s.top(); s.pop();
    }

    return postfix;
}

// Build expression tree from postfix
Node* buildTree(const string& postfix) {
    stack<Node*> s;

    for (char ch : postfix) {
        if (isalnum(ch)) {
            s.push(new Node(ch));
        } else if (isOperator(ch)) {
            Node* right = s.top(); s.pop();
            Node* left = s.top(); s.pop();
            Node* node = new Node(ch);
            node->left = left;
            node->right = right;
            s.push(node);
        }
    }

    return s.top();
}

// Non-recursive postorder
void postorder(Node* root) {
    if (!root) return;
    stack<Node*> s1, s2;
    s1.push(root);

    while (!s1.empty()) {
        Node* node = s1.top(); s1.pop();
        s2.push(node);
        if (node->left) s1.push(node->left);
        if (node->right) s1.push(node->right);
    }

    cout << "Postorder: ";
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
    cout << endl;
}

// Non-recursive inorder
void inorder(Node* root) {
    stack<Node*> s;
    Node* curr = root;

    cout << "Inorder: ";
    while (curr || !s.empty()) {
        while (curr) {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top(); s.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
    cout << endl;
}

int main() {
    string infix;
    cout << "Enter infix expression: ";
    cin >> infix;

    string postfix = infixToPostfix(infix);
    Node* root = buildTree(postfix);

    postorder(root);
    inorder(root);

    return 0;
}
